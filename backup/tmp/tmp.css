/* =======================================
      ORIGINAL
======================================= */
third change

/* =======================================
      common
======================================= */
* {
  box-sizing: border-box;
}
body {
  padding: 0;
  font: 100%/1.6 sans-serif;
  /* fontsize（100%は16pxと同等）とline-heightを同時に設定 */
}
img {
  vertical-align: top;
}
.clearfix { /* floatの親に当てる */
  content: "";
  display: table; /* or block */
  clear: both;
}
.clearfix:before, .clearfix:after {
  content:""; 
  display: block;
}
.clearfix:after {
  clear: both;
}
.container {
  padding-left: 1em;
  padding-right: 1em;
}
.TimesNewRoman {
  font-family:"Times New Roman";
}
.mauto {
  margin: 0 auto;
}
.tal {
  text-align: left;
}
.tac {
  text-align: center;
}
.tar {
  text-align: right;
}
.w100 {
  width: 100%;
}
.maxw100 {
  max-width: 100%;
}
.ho:hover {
  opacity: .8;
}
.for_pc {
  display: block;
}
.for_sm {
  display: none;
}
@media screen and (max-width: 680px){
  .for_pc {
    display: none;
  }
  .for_sm {
    display: block;
  }
}


/* =======================================
      CSS3 TABLE LAYOUT
======================================= */
.sample {
  display: table;
  max-width: 960px;
  width: 100%;
  margin: 0 auto;
}
.dsampleRow {
  display: table-row;
}
.sampleContent {
  display: table-cell;
  table-layout: fixed; /* auto */
  width: auto;
  height: auto;
  text-align: center;
}
.sampleContent img {
  max-width: 100%;
  height: auto;
}


/* =======================================
      CSS3 FLEX BOX
======================================= */
/* flex container */
.sample {
  display: flex;
  /* containerのdisplayを決定 | inline-flex インラインブロック的 */

  flex-direction: row;
  /* horizonに並ぶ | row-reverse 逆horizon | column verticalに並ぶ | column-reverse 逆verticalに並ぶ */

  flex-wrap: wrap;
  /* 折り返しする width.heightなどを決めてやると自動的に適応してくれる*/

  justify-content: center;
  /* horizon敵に要素を整える
   中央配置 | flex-end 右による | space-between 均等配置 | space-around 平均配置 | 
   flex-itemにmargin: autoを追加すると切り離してくれる */

  align-items: stretch;
  /* vertical的な要素を整える itemの高さがcontainerと同じにする */

  align-content: flex-start;
  /* flex-wrapが適応されたときのスタイルの対応 */

  flex-flow: row wrap;
  /* flex-directionとflex-wrapのshorthand */
}

/* flex item */
.sample:nth-of-type(1) {
  order: -1;
  /* 要素の順番を入れ替えることができる defaultは 0 */

  flex-grow: 1;
  /* containerの幅に合わせてitemの幅を調整する defaultは 0 */

  flex-basis: 200px;
  /* 200pxまではflex-growを維持するが、それ以下のwindowサイズではwrapしてくれる */

  flex: 1 200px;
  /* flex-growとflex-basisのshort-hand | flex-shrinkもある */

  align-self: flex-start;
  /* containerに適応していたalign-itemsを個別に設定できる */
}


/* =======================================
      TRANSITOIN
======================================= */
.sample {
  transition-property: background, border-radius, color;
  /* できるだけallを使用しない方がいい */

  transition-duration: .4s, .8s, .4s;
  /* ,で要素別にduraitonを設定する */

  transition-delay: .5s, .4s, 4s;
  /* durationと同じ感じで遅延を設定する */

  transition-timing-function: ease-out;
  transition: opacity .4s ease-out .5s, background .8s ease-out .4s, box-shadow .4s ease-out 4s;
  /* shorthand transiton: property duration timing delay; 書き方大事 */
}


/* =======================================
       TRANSFORM
======================================= */
/* transitionと組み合わせる transition: transform .4s ease-out 0s; とか */
/* jsを使用せずに面白いアニメーションできる */
.sample {
  transform: scale(1.1);
  transform: skew(50%);
  transform: translateX(100%);
  /* 画像１個ぶん左にずれる | translateY | translate(x, y) */

  transform-origin: 50% 50%;
  /* 中央始点を決める */
}


/* =======================================
       COLUMN LAYOUT
======================================= */
 .sample {
  -webkit-column-count: 4;
  /* テキストをgird上に配置することができる（レスポンシブ化) */

  -webkit-column-gap: 3em;
  /* 各コラムのスペースを設定 */

  -webkit-column-rule: 1px dotted;
  /* 各コラム間にボーダーを配置 */

  -webkit-column-width: 250px;
  /* flex-basis的な最低限の幅を設定、自動で折り返す */
}


/* =======================================
       COUNTER INCREMENT
======================================= */
body {
  counter-reset: hoge;
}
.sample {
  counter-increment: hoge;
  /* counter名を定義 */
}
.sample:before {
  content: counter(hoge) "章";
  /* 疑似要素でcounter数字を配置する */
}


/* =======================================
       SVG animation
======================================= */
/*--------------------------------------------
    まずはイラレでイラストをSVG化する
    'path'にclass="logo"をつけてあげる
    'fill'をtransparentにする
    var path = document.querySelector('.logo');
    var length = path.getTotalLength();
--------------------------------------------*/
.logo {
  stroke: tomato;
  stroke-width: 2;
  stroke-dasharray: 810;
  stroke-dashoffset: 810;
  animation: offset 5s linear forwards, fillit .8s 5s;
}
@keyframes offset {
  100% { stroke-dashoffset: 0; }
}
@keyframes fillit {
  100% { fill: tomato; }
}
/*--------------------------------------------
fillを透明にしてstrokeをつける
stroke-dasharrayとstroke-dashoffsetは同じにする
animationを適応させる
ここからは自由に写真を後ろから出してあげたりする
--------------------------------------------*/


/* =======================================
       NEW FEATURE
======================================= */
.sample { 
  box-shadow: inset 0 0 20px rgba(0,0,0,.8);
  /*  画像の内側にshadowを入れる デフォルトはouter */

  background: linear-gradient(0deg, #fff, transparent), #ffa949 url('../img/xxx.jpg') no-repeat center;
  /* ↓背景の色に合わせてfadeOutさせるようなCSS 2行目2つ目のvalueを背景色に合わせる↓ */

  background-image: radial-gradient(circle at top right, #ffa949 0%, firebrick 50%, dodgerblue 100%);
  /* 放射線状に背景に色を入れてくれる カラーコンビネーションを変更する */

  background: #6de590 url('../img/xxx.jpg') no-repeat center / cover, radial-gradient(#6de590, #e67478);
  background-blend-mode: overlay;
  /*背景をブレンドできる 背景を複数決めてもいけるし、1つでもいける ベンダーフレックス必要*/

  background: linear-gradient(90deg, #E55D87 10%, #5FC3E4 90%);
  color: transparent;
  -webkit-background-clip: text; background-clip: text;
  /* テキストで背景をマスクする */

  color: initial; 
  /* 基本はblackになる */

  width: calc(100% / 10);
  /* 数字を入れるvalueに全て利用可能　+ - * / など */

  clip-path: polygon(x x%, x%, x%, x%, x%, x%, x%, x%, x%, x%,);
  /*generatorを参照してvalueを生成してくれる */

  mask-image: url('../img/xxx.png');
  /* テキストにテクスチャを追加できる ベンダーフレックス必要 marginしか使えない */

  content: attr(title); display: inline-block;
  /* ツールチップとかに有効 pesudo-classの時 :before :after */

  -webkit-backdrop-filter: blur(5px); background: rgba(255,255,255,.5);
  /* 背景を半透明にすることができる（ios用？filterと同じ効果をもたらすことができる） */
}

.sample:before {
  content: "";
  display: block;
  width: 100%;
  position: absolute;
  left: 0;
  top: 0;
  background: inherit;
  filter: blur(3px);
}
/* 画像にのみfilterを追加する方法（疑似クラスを使用してそれに対してfilterをかけてあげることで対応可能） */

.sample > h1 {}
/* 要素の直下にある階層の要素を対象 */

.sample ~ h1 {}
/* .hogeの兄弟要素で.hogeがつくもの全てに対象 */

.sample + .sample {}
/* +で隣接している要素を対象 */

:first-letter {}
/* 最初に現れる文字を対象 */

:first-line {}
/* 最初の行にだけ適応 */

.sample:not(.active) {}
/* (.active)以外の.hogeを対象 */

[attr] {}
/* attrの中身と一致するものを対象に */

input[type="radio"]:checked + label {}
/* ラジオボタンがチェックされた場合を対象 */

a[target="_blank"] {}
/* aタグのtarget="_blank"のみに対象 */

form[class="hoge"] {}

.sample[title] {}
/* title属性を持つ.hogeにのみ対象 */

.sample[title='タイトル'] {}
/* title属性にタイトルという値を持つ.hogeに対象 */

.sample[class^="col"] {}
/* colで始まるclass全てに対象 */

.sample[class$="col"] {}
/* colで終わるclass全てに対象 */

.sample[class*="col"] {}
/* colを含むclass全てに対象 */

:root {}
/* htmlと同じ */

.sample:target {}
/* ページ内リンクでボタンが押されたら目的の要素にのみ対象 */

.sample a:after { 
  content: attr(title); 
}
/* htmlの属性に含まれている値を表示できる */

@media (max-width: 960px){ { } }
/* screen and は記載しなくてもこれだけでいける */

@font-face {
  font-family: 'Abolition Regular';
  src: url('../fonts/abolition-regular-webfont.eot');
  src: url('../fonts/abolition-regular-webfont.eot?#iefix') format('embedded-opentype'),
       url('../fonts/abolition-regular-webfont.woff') format('woff'),
       url('../fonts/abolition-regular-webfont.ttf') format('truetype');
}
font-family: 'Abolition Regular', Helvetica, Arial, sans-serif;
/* fontを読み込んでくる方法 追記した@font-faceを利用する */

.sample:after {
  content: "";
  position: absolute;
  right: 100%;
  top: calc(50% - 15px);
  border: solid 15px transparent;
  border-color: transparent;
  border-right-color: #fff;
}
/* 三角を作成する */
/* =======================================
       iframe
======================================= */
#wrapper {
    position: relative;
    width: 100%;
}
#wrapper:before {
    content:"";
    display: block;
    padding-top: 56.25%; /* 高さと幅の比を16:9に固定。9/16*100=56.25 */
}
#content {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}
/* iframeとかで動画を配置する時の56.25%はアスペクト比（16:9）, 75%は（4:3） */


/* =======================================
       Sass
======================================= */
/*--------------------------------------------
Note: 
terminalでscssのある場所に移動 cd
sass --watch . をterminalで実行してcssに自動変換
akikwkm:~ kawakamiakihiro$ cd desktop/portfolio01
akikwkm:portfolio01 kawakamiakihiro$ sass --watch scss:css
これでローカルのフォルダにアクセスできる、それからscssを実行する
--------------------------------------------*/
.sample {
  a {
    color: tomato;
    border: 1px solid white;

    > a {
      color: purple;
    }
    &:hover {
      opacity: .5;
    }
  }
}
/* 基本的なSassの書き方 &は'a'と同意義 ネスト化して書くとコンパイラしてくれる */

$sample: tomato;
$sample2: $sample;
/* $sample, $sample2などを要素として代入するだけで使える */

@mixin sample($hoge, $hogehoge){
  background: $hoge;
  color: $hogehoge;
}
.hoge
  @include sample(red, blue);
}
/* スニペットとしてセレクターの中に入れてやるだけで使える */

.sample {
  @extend .hoge;
}
/* .hogeの要素を継承することができる */

%hoge{
  width: 100%;
}
.sample {
  @extend %hoge;
}
/* %hogeをテンプレとして使い回せる %hogeは直接CSSに反映されない */

@mixin color-class($color){
  .#{$color} {
    color: $color;
    background-image: url('../img/color/#{$color}.jpg');
    @if $color == red {
      border: 1px solid $color;
    }
  }
}
/* #{$color}の表記はお決まり：引数で入る要素名を継承する */

@mixin box($width){
  @if $width > 100px {
    padding: 10px;
  }
}
/* @mixinの中に@ifなどを入れ子にすることも可能 */

@function pixify($value){
  return unquote($value + 'px');
}
/* %シンタックスと似ているがfunctionもSassで使用することができる */


